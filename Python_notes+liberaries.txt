Specifying contracts: Contracts can be specified in three ways:

Using the ``@contract`` decorator:
@contract(a='int,>0', b='list[N],N>0', returns='list[N]')
def my_function(a, b):
    ...
Using annotations (for Python 3):
@contract
def my_function(a : 'int,>0', b : 'list[N],N>0') -> 'list[N]':
     # Requires b to be a nonempty list, and the return
     # value to have the same length.
     ...
Using docstrings, with the :type: and :rtype: tags:
@contract
def my_function(a, b):
    """ Function description.
        :type a: int,>0
        :type b: list[N],N>0
        :rtype: list[N]
    """
    ...
Deployment: In production, all checks can be disabled using the function contracts.disable_all(), so the performance hit is 0.

-----------------------------------

@deal
@deal.pre -> precondition
@deal.post->postcondition
@deal.ensure->Ensure is a postcondition that accepts not only result, but also function arguments. Must be true after function 
executed
@deal.inv->Invariant â€“ condition that can be relied upon to be true during execution of a program.

------------------------------------------
 from python_ta.contracts import check_all_contracts
 check_all_contracts()


Documentation:
https://contracts.readthedocs.io/en/latest/api.html 
@deal: https://github.com/life4/deal/blob/master/docs/basic/values.md 
